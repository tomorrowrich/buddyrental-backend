generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  adminId   String @id @unique @default(uuid()) @map("admin_id") @db.Uuid
  firstName String @map("first_name") @db.VarChar(64)
  lastName  String @map("last_name") @db.VarChar(64)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  User      User?     @relation(fields: [adminId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  userId         String              @id @unique @default(uuid()) @map("user_id") @db.Uuid
  adminId        String?             @map("admin_id") @db.Uuid
  firstName      String              @map("first_name") @db.VarChar(64)
  lastName       String              @map("last_name") @db.VarChar(64)
  email          String              @unique @map("email") @db.VarChar(255)
  password       String              @map("password") @db.Text
  citizenId      String              @unique @map("citizen_id")
  phoneNumber    String              @map("phone_number")
  verified       Boolean             @default(false)
  displayName    String?             @map("display_name") @db.VarChar(255)
  gender         UserGender          @map("gender")
  dateOfBirth    DateTime            @map("date_of_birth") @db.Date
  address        String              @db.VarChar(255)
  city           String              @db.VarChar(64)
  postalCode     String              @db.VarChar(16)
  profilePicture String?             @map("profile_picture") @db.Text
  description    String?             @db.Text
  interests      Tag[]
  reviewsMade    Review[]            @relation("ReviewToCommenter")
  buddy          Buddy?
  reservations   ReservationRecord[]
  Admin          Admin?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  accessToken  String? @map("access_token")

  @@unique([email, phoneNumber])
}

model Buddy {
  buddyId             String              @id @unique @default(uuid()) @map("buddy_id") @db.Uuid
  balanceWithdrawable Float               @map("balance_withdrawable") @db.DoublePrecision
  ratingAvg           Float?              @map("rating_avg") @db.DoublePrecision
  totalReviews        Int                 @default(0) @map("total_reviews")
  priceMin            Float               @map("price_min") @db.DoublePrecision
  priceMax            Float?              @map("price_max") @db.DoublePrecision
  tagsCount           Int                 @default(0) @map("tags_count")
  userId              String?             @unique @map("user_id") @db.Uuid
  user                User?               @relation(fields: [userId], references: [userId], onDelete: SetNull)
  reservations        ReservationRecord[]
  reviews             Review[]            @relation("ReviewToProfile")
  tags                Tag[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([ratingAvg, priceMin, priceMax])
  @@index([tagsCount])
}

model Tag {
  tagId   String  @id @unique @default(uuid()) @map("tag_id") @db.Uuid
  name    String  @map("name") @db.Text
  buddies Buddy[]
  users   User[]

  @@index([name])
}

model Review {
  reviewId    Int    @id @default(autoincrement())
  commenterId String @db.Uuid
  profileId   String @db.Uuid
  rating      Int    @db.SmallInt
  comment     String @db.Text
  commenter   User   @relation("ReviewToCommenter", fields: [commenterId], references: [userId], onDelete: Cascade)
  profile     Buddy  @relation("ReviewToProfile", fields: [profileId], references: [buddyId], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([commenterId])
  @@index([profileId])
  @@index([profileId, createdAt])
  @@index([deletedAt])
}

model ReservationRecord {
  reservationId    String            @id @unique @default(uuid()) @map("reservation_id") @db.Uuid
  price            Float             @map("price") @db.DoublePrecision
  reservationStart DateTime          @map("reservation_start") @db.Timestamp
  reservationEnd   DateTime          @map("reservation_end") @db.Timestamp
  status           ReservationStatus @map("status")
  userId           String            @map("user_id") @db.Uuid
  buddyId          String            @map("buddy_id") @db.Uuid
  user             User              @relation(fields: [userId], references: [userId], onDelete: Cascade)
  buddy            Buddy             @relation(fields: [buddyId], references: [buddyId], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([userId])
  @@index([buddyId])
  @@index([reservationStart])
  @@index([status])
  @@index([deletedAt])
  @@index([userId, reservationStart])
  @@index([buddyId, reservationStart])
}

enum ReservationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum UserGender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}
