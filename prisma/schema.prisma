generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  adminId   String @id @unique @default(uuid()) @map("admin_id") @db.Uuid
  firstName String @map("first_name") @db.VarChar(64)
  lastName  String @map("last_name") @db.VarChar(64)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  User      User?     @relation(fields: [adminId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  userId             String     @id @unique @default(uuid()) @map("user_id") @db.Uuid
  firstName          String     @map("first_name") @db.VarChar(64)
  lastName           String     @map("last_name") @db.VarChar(64)
  email              String     @unique @map("email") @db.VarChar(255)
  password           String     @map("password") @db.Text
  citizenId          String     @unique @map("citizen_id")
  phoneNumber        String     @map("phone_number")
  verified           Boolean    @default(false)
  displayName        String?    @map("display_name") @db.VarChar(255)
  gender             UserGender @map("gender")
  dateOfBirth        DateTime   @map("date_of_birth") @db.Date
  address            String     @db.VarChar(255)
  city               String     @db.VarChar(64)
  postalCode         String     @db.VarChar(16)
  country            String     @default("TH") @db.VarChar(2)
  profilePicture     String?    @map("profile_picture") @db.Text
  description        String?    @db.Text
  balance            Float      @default(0) @map("balance") @db.DoublePrecision
  stripeCustomerId   String?    @map("stripe_customer_id") @db.VarChar(255)
  accessToken        String?    @map("access_token")
  resetPasswordToken String?    @map("reset_password_token") @db.VarChar(255)

  interests    Tag[]
  reviewsMade  Review[]            @relation("ReviewToCommenter")
  Chat         Chat[]
  ChatMessage  ChatMessage[]
  buddy        Buddy?
  reservations ReservationRecord[]
  transactions Transaction[]
  Reports      Reports[]
  admin        Admin?

  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  deletedAt     DateTime?       @map("deleted_at")
  Notifications Notifications[]

  @@unique([email, phoneNumber])
}

model Buddy {
  buddyId             String  @id @unique @default(uuid()) @map("buddy_id") @db.Uuid
  balanceWithdrawable Float   @map("balance_withdrawable") @db.DoublePrecision
  description         String  @default("") @map("description") @db.Text
  ratingAvg           Float?  @map("rating_avg") @db.DoublePrecision
  totalReviews        Int     @default(0) @map("total_reviews")
  priceMin            Float   @map("price_min") @db.DoublePrecision
  priceMax            Float?  @map("price_max") @db.DoublePrecision
  tagsCount           Int     @default(0) @map("tags_count")
  stripeAccountId     String? @unique @map("stripe_account_id") @db.VarChar(255)
  userId              String? @unique @map("user_id") @db.Uuid
  user                User?   @relation(fields: [userId], references: [userId], onDelete: SetNull)

  reservations ReservationRecord[]
  schedules    Schedule[]
  reviews      Review[]            @relation("ReviewToProfile")
  tags         Tag[]
  Chat         Chat[]
  Reports      Reports[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([ratingAvg, priceMin, priceMax])
  @@index([tagsCount])
}

model Schedule {
  scheduleId  String         @id @unique @default(uuid()) @map("schedule_id") @db.Uuid
  buddyId     String         @db.Uuid
  description String         @default("") @map("description") @db.Text
  status      ScheduleStatus @default(AVAILABLE)
  start       DateTime       @map("start")
  end         DateTime       @map("end")

  buddy       Buddy              @relation(fields: [buddyId], references: [buddyId], onDelete: Cascade)
  reservation ReservationRecord?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([buddyId])
  @@index([status])
  @@index([start, end])
}

model Tag {
  tagId   String  @id @unique @default(uuid()) @map("tag_id") @db.Uuid
  name    String  @map("name") @db.VarChar(24)
  buddies Buddy[]
  users   User[]

  @@index([name])
}

model Review {
  reviewId    Int    @id @default(autoincrement())
  commenterId String @db.Uuid
  profileId   String @db.Uuid
  rating      Int    @db.SmallInt
  comment     String @db.Text
  commenter   User   @relation("ReviewToCommenter", fields: [commenterId], references: [userId], onDelete: Cascade)
  profile     Buddy  @relation("ReviewToProfile", fields: [profileId], references: [buddyId], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([commenterId])
  @@index([profileId])
  @@index([profileId, createdAt])
  @@index([deletedAt])
}

model ReservationRecord {
  reservationId    String            @id @unique @default(uuid()) @map("reservation_id") @db.Uuid
  price            Float             @map("price") @db.DoublePrecision
  reservationStart DateTime          @map("reservation_start") @db.Timestamp
  reservationEnd   DateTime          @map("reservation_end") @db.Timestamp
  detail           String            @default("") @map("detail") @db.Text
  status           ReservationStatus @map("status")
  userId           String            @map("user_id") @db.Uuid
  buddyId          String            @map("buddy_id") @db.Uuid
  scheduleId       String            @unique @map("schedule_id") @db.Uuid

  user     User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  buddy    Buddy    @relation(fields: [buddyId], references: [buddyId], onDelete: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [scheduleId])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([userId])
  @@index([buddyId])
  @@index([scheduleId])
  @@index([reservationStart])
  @@index([status])
  @@index([deletedAt])
  @@index([userId, reservationStart])
  @@index([buddyId, reservationStart])
}

model Chat {
  id         String @id @default(uuid()) @map("id") @db.Uuid
  buddyId    String @map("buddy_id") @db.Uuid
  customerId String @map("customer_id") @db.Uuid
  buddy      Buddy  @relation(fields: [buddyId], references: [buddyId], onDelete: Cascade)
  customer   User   @relation(fields: [customerId], references: [userId], onDelete: Cascade)

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  ChatMessage ChatMessage[]

  @@unique([buddyId, customerId])
  @@index([buddyId])
  @@index([customerId])
  @@index([deletedAt])
}

model ChatMessage {
  id       String            @id @default(uuid()) @map("id") @db.Uuid
  chatId   String            @map("chat_id") @db.Uuid
  sender   User              @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  senderId String            @map("sender_id") @db.Uuid
  content  String            @map("content") @db.Text
  meta     Json              @map("meta") @db.Json
  status   ChatMessageStatus @map("status")
  readAt   DateTime?         @map("read_at")
  chat     Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([chatId])
  @@index([senderId])
  @@index([deletedAt])
}

model Transaction {
  id        String           @id @default(uuid()) @map("id") @db.Uuid
  userId    String?          @map("user_id") @db.Uuid
  type      TransactionType  @map("type")
  amount    Float            @map("amount") @db.DoublePrecision
  paymentId String?          @unique @map("payment_id") @db.VarChar(255)
  status    TrasactionStatus @map("status")
  timestamp DateTime         @default(now()) @map("timestamp")
  meta      Json             @map("meta") @db.Json

  user User? @relation(fields: [userId], references: [userId], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([createdAt])
  @@index([paymentId])
}

model Coupon {
  id        String       @id @default(uuid()) @map("id") @db.Uuid
  code      String       @unique @map("code") @db.VarChar(64)
  type      CouponType   @map("type")
  value     Float        @map("value") @db.DoublePrecision
  startDate DateTime     @map("start_date") @db.Timestamp
  endDate   DateTime     @map("end_date") @db.Timestamp
  status    CouponStatus @map("status")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
}

model ReportsCategory {
  id      String    @id @default(uuid()) @map("id") @db.Uuid
  name    String    @map("name") @db.VarChar(60)
  Reports Reports[]
}

model Notifications {
  id        String           @id @default(uuid()) @map("id") @db.Uuid
  userId    String           @map("user_id") @db.Uuid
  type      NotificationType @map("type")
  title     String           @map("title") @db.VarChar(120)
  body      String           @map("body") @db.Text
  url       String?          @map("url") @db.VarChar(255)
  read      Boolean          @default(false) @map("read")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  deletedAt DateTime?        @map("deleted_at")

  user User? @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([deletedAt])
  @@index([userId])
  @@index([userId, read])
}

model Reports {
  id         String  @id @default(uuid()) @map("id") @db.Uuid
  userId     String  @map("user_id") @db.Uuid
  buddyId    String? @map("buddy_id") @db.Uuid
  reporterId String  @map("reporter_id") @db.Uuid
  categoryId String  @map("category_id") @db.Uuid
  details    String  @map("details") @db.Text

  status   ReportStatus    @map("status")
  category ReportsCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reporter User            @relation(fields: [reporterId], references: [userId], onDelete: Cascade)
  buddy    Buddy?          @relation(fields: [buddyId], references: [buddyId], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([deletedAt])
}

enum ReportStatus {
  PENDING
  RESOLVED
}

enum ChatMessageStatus {
  WAITING
  SENT
  READ
}

enum ReservationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  REFUND
}

enum TrasactionStatus {
  PENDING
  COMPLETED
  FAILED
  VOIDED
}

enum CouponStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum ScheduleStatus {
  AVAILABLE
  UNCONFIRMED
  BUSY
}

enum UserGender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum NotificationType {
  Booking
  Chat
  Others
}
